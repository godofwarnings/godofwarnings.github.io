<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-09-08T18:42:55+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Radhikesh&apos;s Blog</title><subtitle>Personal blog for Radhikesh, a computer-science undergraduate at IIIT Hyderabad, India</subtitle><author><name>Radhikesh Agrawal</name><email>rhagrawal1.0.7@gmail.com</email></author><entry><title type="html">The Egg Dropping Puzzle: An Intuitive Solution to a Classic Problem</title><link href="http://localhost:4000/2025/09/08/two-egg-puzzle/" rel="alternate" type="text/html" title="The Egg Dropping Puzzle: An Intuitive Solution to a Classic Problem" /><published>2025-09-08T00:00:00+05:30</published><updated>2025-09-08T00:00:00+05:30</updated><id>http://localhost:4000/2025/09/08/two-egg-puzzle</id><content type="html" xml:base="http://localhost:4000/2025/09/08/two-egg-puzzle/">&lt;blockquote&gt;
  &lt;p&gt;Originally written on &lt;strong&gt;8 September 2025, 18:22&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul class=&quot;toc&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-introduction&quot; id=&quot;markdown-toc-heading-introduction&quot;&gt;Introduction&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-problem-statement&quot; id=&quot;markdown-toc-heading-problem-statement&quot;&gt;Problem Statement&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-flawed-strategies-building-intuition&quot; id=&quot;markdown-toc-heading-flawed-strategies-building-intuition&quot;&gt;Flawed Strategies: Building Intuition&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-strategy-1-the-one-egg-method-linear-scan&quot; id=&quot;markdown-toc-heading-strategy-1-the-one-egg-method-linear-scan&quot;&gt;Strategy 1: The &quot;One Egg&quot; Method (Linear Scan)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-strategy-2-the-binary-search-method&quot; id=&quot;markdown-toc-heading-strategy-2-the-binary-search-method&quot;&gt;Strategy 2: The &quot;Binary Search&quot; Method&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-the-optimal-strategy-flipping-the-question&quot; id=&quot;markdown-toc-heading-the-optimal-strategy-flipping-the-question&quot;&gt;The Optimal Strategy: Flipping the Question&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-an-example-2-eggs-and-4-drops&quot; id=&quot;markdown-toc-heading-an-example-2-eggs-and-4-drops&quot;&gt;An Example: 2 Eggs and 4 Drops&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-the-logic-of-the-first-drop&quot; id=&quot;markdown-toc-heading-the-logic-of-the-first-drop&quot;&gt;The Logic of the First Drop&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-solving-the-puzzle&quot; id=&quot;markdown-toc-heading-solving-the-puzzle&quot;&gt;Solving the Puzzle&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-the-general-solution-mathematical-proof&quot; id=&quot;markdown-toc-heading-the-general-solution-mathematical-proof&quot;&gt;The General Solution: Mathematical Proof&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-references&quot; id=&quot;markdown-toc-heading-references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;heading-introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The egg dropping puzzle is a famous brain teaser that challenges our assumptions about optimization. It&apos;s a fantastic problem because its elegant solution is both counter-intuitive and deeply satisfying once understood. It forces us to balance risk and information, a core concept in computer science and strategic planning.&lt;/p&gt;

&lt;h3 id=&quot;heading-problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;You are in a 100-story building and are given two identical eggs. You want to determine the &lt;strong&gt;threshold floor&lt;/strong&gt;, which is the lowest floor from which an egg will break when dropped. An egg that survives a fall can be reused, but a broken egg is lost.&lt;/p&gt;

&lt;p&gt;The question is: What is the &lt;strong&gt;minimum number of drops&lt;/strong&gt; you need to guarantee you can find the threshold floor in the worst-case scenario?&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-flawed-strategies-building-intuition&quot;&gt;Flawed Strategies: Building Intuition&lt;/h2&gt;

&lt;p&gt;Before jumping to the optimal solution, it&apos;s helpful to understand why more straightforward approaches don&apos;t work well.&lt;/p&gt;

&lt;h3 id=&quot;heading-strategy-1-the-one-egg-method-linear-scan&quot;&gt;Strategy 1: The &quot;One Egg&quot; Method (Linear Scan)&lt;/h3&gt;

&lt;p&gt;If you only had one precious egg, your strategy is severely limited. You cannot risk breaking it on a high floor, as you would lose all ability to test the floors below. Your only choice is to start at floor 1 and work your way up, one by one.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Drop from floor 1. If it breaks, the threshold is 1.&lt;/li&gt;
  &lt;li&gt;If not, drop from floor 2. If it breaks, the threshold is 2.&lt;/li&gt;
  &lt;li&gt;…and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the worst-case scenario (the threshold floor is 99, 100, or the eggs don&apos;t break at all), you would need up to 99 or 100 drops. With two eggs, we can certainly do better.&lt;/p&gt;

&lt;h3 id=&quot;heading-strategy-2-the-binary-search-method&quot;&gt;Strategy 2: The &quot;Binary Search&quot; Method&lt;/h3&gt;

&lt;p&gt;A binary search seems promising. Let&apos;s try dropping the first egg from the middle, floor 50.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Case A: The egg breaks.&lt;/strong&gt; You&apos;ve used one drop. Now you have one egg left, and you know the threshold is somewhere between floor 1 and 49. With only one egg, you must revert to the linear scan method, checking floors 1, 2, 3… up to 49.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Worst-Case:&lt;/strong&gt; 1 (from floor 50) + 49 (linear scan) = &lt;strong&gt;50 drops&lt;/strong&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Case B: The egg survives.&lt;/strong&gt; You&apos;ve used one drop. You still have two eggs and now must find the threshold between floors 51 and 100. You could repeat the process and drop from floor 75.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The issue is the asymmetry in the worst-case outcomes. A single break forces us into a slow, linear scan. While better than 100 drops, 50 is far from optimal. The problem is that our first drop doesn&apos;t balance the work required in the &quot;break&quot; vs. &quot;survive&quot; scenarios.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-the-optimal-strategy-flipping-the-question&quot;&gt;The Optimal Strategy: Flipping the Question&lt;/h2&gt;

&lt;p&gt;The key insight, is to change the question. Instead of asking:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&quot;Given 100 floors, what is the minimum number of drops ($n$)?&quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We ask the inverse:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&quot;Given a fixed number of drops ($n$), what is the &lt;strong&gt;maximum number of floors&lt;/strong&gt; ($H$) I can test?&quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This reframing makes the problem much more manageable. Let&apos;s say we allow ourselves a maximum of $n$ drops.&lt;/p&gt;

&lt;h3 id=&quot;heading-an-example-2-eggs-and-4-drops&quot;&gt;An Example: 2 Eggs and 4 Drops&lt;/h3&gt;

&lt;p&gt;Let&apos;s work through a concrete example. Suppose you have &lt;strong&gt;2 eggs&lt;/strong&gt; and are allowed a maximum of &lt;strong&gt;4 drops&lt;/strong&gt;. What is the tallest building you can solve the puzzle for?&lt;/p&gt;

&lt;p&gt;Let&apos;s say your first drop is from floor $x$.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Case 1: The egg breaks.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;You have used &lt;strong&gt;1 drop&lt;/strong&gt; and are left with &lt;strong&gt;1 egg&lt;/strong&gt; and &lt;strong&gt;3 drops&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;With only one egg, you must check the floors below $x$ one by one.&lt;/li&gt;
      &lt;li&gt;Since you have 3 drops left, you can check a maximum of &lt;strong&gt;3 floors&lt;/strong&gt; this way.&lt;/li&gt;
      &lt;li&gt;To maximize the total height, you should plan for this worst case. So, the number of floors below your first drop ($x-1$) must be 3.&lt;/li&gt;
      &lt;li&gt;This means your first drop &lt;strong&gt;must be from floor $x = 4$&lt;/strong&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Case 2: The egg survives.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;You dropped from floor 4 and the egg is fine. You have used &lt;strong&gt;1 drop&lt;/strong&gt; and are left with &lt;strong&gt;2 eggs&lt;/strong&gt; and &lt;strong&gt;3 drops&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;Now, you need to figure out how many floors &lt;em&gt;above&lt;/em&gt; floor 4 you can test with your remaining 2 eggs and 3 drops. This is a smaller version of the same problem.&lt;/li&gt;
      &lt;li&gt;Let&apos;s find the max height you can test with 2 eggs and 3 drops. Let&apos;s call it $H(3)$. Using the same logic, your next drop should be from 3 floors above your current position (floor 4), so from floor $4+3=7$. If it breaks, you use your last 2 drops to check floors 5 and 6. If it survives, you continue up. The total height you can check with 3 drops turns out to be 6 floors.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Putting it all together for 4 drops:&lt;/strong&gt;
Your first drop is from floor 4.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If it breaks, you check floors 1, 2, and 3. Total drops used: 1 (floor 4) + up to 3 (linear scan) = 4 drops max.&lt;/li&gt;
  &lt;li&gt;If it survives, you move up. You know floors 1-4 are safe. You can then test an additional &lt;strong&gt;6 floors&lt;/strong&gt; above with your remaining 3 drops.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, the maximum total number of floors you can test is:
\(\text{Total Floors} = \underbrace{(4 - 1)}_{\text{Floors below}} + \underbrace{1}_{\text{Floor of drop}} + \underbrace{6}_{\text{Floors above}} = 10 \text{ floors}\)
With 4 drops, we can guarantee finding the threshold in a 10-story building.&lt;/p&gt;

&lt;h3 id=&quot;heading-the-logic-of-the-first-drop&quot;&gt;The Logic of the First Drop&lt;/h3&gt;

&lt;p&gt;Now, let&apos;s generalize. Suppose we allow ourselves a maximum of $n$ drops.&lt;/p&gt;

&lt;p&gt;Your first drop is from floor $x$. Two things can happen:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The egg breaks.&lt;/strong&gt; You have used &lt;strong&gt;1 drop&lt;/strong&gt; and have lost an egg. You are now left with &lt;strong&gt;1 egg&lt;/strong&gt; and &lt;strong&gt;$n-1$ drops&lt;/strong&gt;. With only one egg, you must use the remaining $n-1$ drops to check the floors &lt;em&gt;below&lt;/em&gt; $x$ (i.e., floors 1 to $x-1$) one by one. To guarantee success in the worst case, the number of floors you have to check, $x-1$, must be no more than the drops you have left, $n-1$. Therefore:
 \(x - 1 \le n - 1 \implies x \le n\)
 To maximize the total height, we should choose the highest possible floor for our first drop, so we choose &lt;strong&gt;$x = n$&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The egg survives.&lt;/strong&gt; You have used &lt;strong&gt;1 drop&lt;/strong&gt; but still have &lt;strong&gt;2 eggs&lt;/strong&gt;. You have &lt;strong&gt;$n-1$ drops&lt;/strong&gt; remaining. You can now move up from floor $x$ and solve the problem for a taller building with your remaining $n-1$ drops.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Combining these, the maximum number of floors we can test with $n$ drops, let&apos;s call it $H(n)$, is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The $n-1$ floors below our first drop (checked linearly if it breaks).&lt;/li&gt;
  &lt;li&gt;The 1 floor &lt;em&gt;at&lt;/em&gt; our first drop.&lt;/li&gt;
  &lt;li&gt;The $H(n-1)$ floors &lt;em&gt;above&lt;/em&gt; our first drop (which we can test with our remaining $n-1$ drops).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This gives us a beautiful recurrence relation:
\(H(n) = (n-1) + 1 + H(n-1) = n + H(n-1)\)&lt;/p&gt;

&lt;h3 id=&quot;heading-solving-the-puzzle&quot;&gt;Solving the Puzzle&lt;/h3&gt;

&lt;p&gt;Let&apos;s unroll this recurrence.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$H(1) = 1$ (With one drop, you can only test floor 1).&lt;/li&gt;
  &lt;li&gt;$H(2) = 2 + H(1) = 2 + 1 = 3$.&lt;/li&gt;
  &lt;li&gt;$H(3) = 3 + H(2) = 3 + 2 + 1 = 6$.&lt;/li&gt;
  &lt;li&gt;$H(n) = n + (n-1) + (n-2) + \dots + 1$.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is simply the sum of the first $n$ integers, which corresponds to the &lt;strong&gt;n-th triangular number&lt;/strong&gt;.
\(H(n) = \frac{n(n+1)}{2}\)&lt;/p&gt;

&lt;p&gt;Now we can return to the original problem. We need to find the smallest integer $n$ such that the maximum height we can test, $H(n)$, is at least 100 floors.
\(\frac{n(n+1)}{2} \ge 100\)
\(n(n+1) \ge 200\)&lt;/p&gt;

&lt;p&gt;We can see by inspection that $13 \times 14 = 182$ (too small) and $14 \times 15 = 210$ (just right).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;With 13 drops, we can only guarantee testing up to $\frac{13 \times 14}{2} = 91$ floors.&lt;/li&gt;
  &lt;li&gt;With 14 drops, we can guarantee testing up to $\frac{14 \times 15}{2} = 105$ floors, which is more than enough for our 100-story building.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, the minimum number of drops required in the worst case is &lt;strong&gt;14&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-the-general-solution-mathematical-proof&quot;&gt;The General Solution: Mathematical Proof&lt;/h2&gt;

&lt;p&gt;The intuitive method works perfectly for 2 eggs. Lets discuss a method that works for any number of eggs ($k$) and any number of drops [$n$].&lt;/p&gt;

&lt;p&gt;Let&apos;s define $H(k, n)$ as the maximum height (number of floors) we can test with $k$ eggs and $n$ drops.&lt;/p&gt;

&lt;p&gt;Consider our first drop from some floor $a$.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;If the egg breaks:&lt;/strong&gt; We have used 1 drop and lost 1 egg. We are left with $k-1$ eggs and $n-1$ drops. We must now test the $a-1$ floors below. The maximum number of floors we can handle in this situation is $H(k-1, n-1)$. So, $a-1 = H(k-1, n-1)$.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;If the egg survives:&lt;/strong&gt; We have used 1 drop but still have $k$ eggs. We are left with $k$ eggs and $n-1$ drops. We can now test the floors above floor $a$. The maximum number of additional floors we can test is $H(k, n-1)$.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The total height is the sum of the floors below, the current floor, and the floors above:
\(H(k, n) = (\text{floors below}) + 1 + (\text{floors above})\)
\(H(k, n) = H(k-1, n-1) + 1 + H(k, n-1)\)&lt;/p&gt;

&lt;p&gt;This recurrence relation allows us to build a table for any combination of eggs and drops, just as demonstrated in the video.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Base Cases:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;With 1 egg, you must scan linearly: $H(1, n) = n$&lt;/li&gt;
  &lt;li&gt;With 1 drop, you can only check floor 1: $H(k, 1) = 1$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using this, we can verify our previous result for $k=2$ eggs.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$H(2, 1) = 1$.&lt;/li&gt;
  &lt;li&gt;$H(2, 2) = H(1, 1) + 1 + H(2, 1) = 1 + 1 + 1 = 3$.&lt;/li&gt;
  &lt;li&gt;$H(2, 3) = H(1, 2) + 1 + H(2, 2) = 2 + 1 + 3 = 6$.&lt;/li&gt;
  &lt;li&gt;$H(2, 4) = H(1, 3) + 1 + H(2, 3) = 3 + 1 + 6 = 10$.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This perfectly generates the triangular numbers we found earlier: 1, 3, 6, 10, …&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=c3s-a7e_iUE&quot;&gt;James Tanton - Egg Dropping: Going beyond just solving the classic puzzle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Radhikesh Agrawal</name><email>rhagrawal1.0.7@gmail.com</email></author><category term="Puzzles" /><category term="Mathematics" /><category term="Optimization" /><category term="Quant" /><category term="Brain-Teaser" /><category term="Dynamic-Programming" /><category term="Recursion" /><category term="Strategy" /><summary type="html">Originally written on 8 September 2025, 18:22</summary></entry><entry><title type="html">Anterograde Amnesia</title><link href="http://localhost:4000/2025/09/04/anterograde-amnesia/" rel="alternate" type="text/html" title="Anterograde Amnesia" /><published>2025-09-04T00:00:00+05:30</published><updated>2025-09-04T00:00:00+05:30</updated><id>http://localhost:4000/2025/09/04/anterograde-amnesia</id><content type="html" xml:base="http://localhost:4000/2025/09/04/anterograde-amnesia/"></content><author><name>Radhikesh Agrawal</name><email>rhagrawal1.0.7@gmail.com</email></author><category term="Psychology" /><category term="Neuroscience" /><category term="Memory" /><category term="Brain" /><category term="Amnesia" /></entry><entry><title type="html">Configure Power Line Frequency on Linux</title><link href="http://localhost:4000/2025/09/04/configure-power-line-frequency-on-linux/" rel="alternate" type="text/html" title="Configure Power Line Frequency on Linux" /><published>2025-09-04T00:00:00+05:30</published><updated>2025-09-04T00:00:00+05:30</updated><id>http://localhost:4000/2025/09/04/configure-power-line-frequency-on-linux</id><content type="html" xml:base="http://localhost:4000/2025/09/04/configure-power-line-frequency-on-linux/">&lt;blockquote&gt;
  &lt;p&gt;Originally written on &lt;strong&gt;04 September 2025, 01:15&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul class=&quot;toc&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-intuition&quot; id=&quot;markdown-toc-heading-intuition&quot;&gt;Intuition&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-1-identify-device-ids&quot; id=&quot;markdown-toc-heading-1-identify-device-ids&quot;&gt;1. Identify Device IDs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-2-install-required-tools&quot; id=&quot;markdown-toc-heading-2-install-required-tools&quot;&gt;2. Install Required Tools&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-3-create-the-udev-rule&quot; id=&quot;markdown-toc-heading-3-create-the-udev-rule&quot;&gt;3. Create the Udev Rule&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-4-apply-the-rule&quot; id=&quot;markdown-toc-heading-4-apply-the-rule&quot;&gt;4. Apply the Rule&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-5-verify&quot; id=&quot;markdown-toc-heading-5-verify&quot;&gt;5. Verify&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-6-debugging&quot; id=&quot;markdown-toc-heading-6-debugging&quot;&gt;6. Debugging&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;heading-intuition&quot;&gt;Intuition&lt;/h1&gt;

&lt;p&gt;By default, webcams like the &lt;strong&gt;Logitech Brio 100&lt;/strong&gt; may not automatically adjust to the correct &lt;strong&gt;power-line frequency&lt;/strong&gt; (50 Hz in most regions, 60 Hz in some).&lt;br /&gt;
This mismatch often causes &lt;strong&gt;flickering under artificial lighting&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The goal is to configure the Brio 100 to &lt;strong&gt;always set the correct power-line frequency&lt;/strong&gt; automatically when plugged in, using:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;udev&lt;/code&gt; rules (to trigger configuration when device is detected)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v4l2-ctl&lt;/code&gt; (from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v4l-utils&lt;/code&gt;) to control video device parameters&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-1-identify-device-ids&quot;&gt;1. Identify Device IDs&lt;/h2&gt;

&lt;p&gt;First, plug in the webcam and check its &lt;strong&gt;vendor&lt;/strong&gt; and &lt;strong&gt;product IDs&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;lsusb
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Example output:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Bus 003 Device 009: ID 046d:094c Logitech, Inc. Brio 100
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Vendor ID (VID):&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;046d&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Product ID (PID):&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;094c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-2-install-required-tools&quot;&gt;2. Install Required Tools&lt;/h2&gt;

&lt;p&gt;The tool &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v4l2-ctl&lt;/code&gt; is part of &lt;strong&gt;v4l-utils&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; v4l-utils
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check installation:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;v4l2-ctl &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-3-create-the-udev-rule&quot;&gt;3. Create the Udev Rule&lt;/h2&gt;

&lt;p&gt;Create a new rules file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nano /etc/udev/rules.d/99-logitech-brio.rules
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add the following rule:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-udev&quot;&gt;SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;046d&quot;, ATTRS{idProduct}==&quot;094c&quot;, RUN+=&quot;/usr/bin/v4l2-ctl -d /dev/video%n --set-ctrl=power_line_frequency=1&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;power_line_frequency=1&lt;/code&gt; = &lt;strong&gt;50 Hz&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;power_line_frequency=2&lt;/code&gt; = &lt;strong&gt;60 Hz&lt;/strong&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-4-apply-the-rule&quot;&gt;4. Apply the Rule&lt;/h2&gt;

&lt;p&gt;Reload the udev rules:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;udevadm control &lt;span class=&quot;nt&quot;&gt;--reload-rules&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;udevadm trigger
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Replug the webcam (or reboot the system).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-5-verify&quot;&gt;5. Verify&lt;/h2&gt;

&lt;p&gt;List all video devices:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;v4l2-ctl &lt;span class=&quot;nt&quot;&gt;--list-devices&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check if the control is applied:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;v4l2-ctl &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /dev/video0 &lt;span class=&quot;nt&quot;&gt;--get-ctrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;power_line_frequency
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Expected output:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;power_line_frequency: 1
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-6-debugging&quot;&gt;6. Debugging&lt;/h2&gt;

&lt;p&gt;If the rule doesn’t trigger, try:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Test manually:&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;udevadm &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; /sys/class/video4linux/video0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Look for your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v4l2-ctl&lt;/code&gt; command in the logs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Check system logs:&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;journalctl &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; systemd-udevd &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;</content><author><name>Radhikesh Agrawal</name><email>rhagrawal1.0.7@gmail.com</email></author><category term="Linux" /><category term="Hardware" /><category term="Configuration" /><category term="Linux" /><category term="Arch" /><category term="Manjaro" /><summary type="html">Originally written on 04 September 2025, 01:15</summary></entry><entry><title type="html">The Fox and Duck Puzzle: A Masterclass in Optimal Strategy</title><link href="http://localhost:4000/2025/09/04/duck-and-fish/" rel="alternate" type="text/html" title="The Fox and Duck Puzzle: A Masterclass in Optimal Strategy" /><published>2025-09-04T00:00:00+05:30</published><updated>2025-09-04T00:00:00+05:30</updated><id>http://localhost:4000/2025/09/04/duck-and-fish</id><content type="html" xml:base="http://localhost:4000/2025/09/04/duck-and-fish/">&lt;blockquote&gt;
  &lt;p&gt;Originally written on &lt;strong&gt;6 September 2025, 15:02&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul class=&quot;toc&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-introduction&quot; id=&quot;markdown-toc-heading-introduction&quot;&gt;Introduction&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-problem-statement&quot; id=&quot;markdown-toc-heading-problem-statement&quot;&gt;Problem Statement&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-the-setup&quot; id=&quot;markdown-toc-heading-the-setup&quot;&gt;The Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-the-simplest-strategy-a-simple-dash&quot; id=&quot;markdown-toc-heading-the-simplest-strategy-a-simple-dash&quot;&gt;The Simplest Strategy: A Simple Dash&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-the-optimal-strategy-a-two-phase-escape&quot; id=&quot;markdown-toc-heading-the-optimal-strategy-a-two-phase-escape&quot;&gt;The Optimal Strategy: A Two-Phase Escape&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-phase-1-gaining-an-advantage&quot; id=&quot;markdown-toc-heading-phase-1-gaining-an-advantage&quot;&gt;Phase 1: Gaining an Advantage&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-phase-2-the-optimal-dash&quot; id=&quot;markdown-toc-heading-phase-2-the-optimal-dash&quot;&gt;Phase 2: The Optimal Dash&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-the-derivation&quot; id=&quot;markdown-toc-heading-the-derivation&quot;&gt;The Derivation&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-setting-up-the-geometry&quot; id=&quot;markdown-toc-heading-setting-up-the-geometry&quot;&gt;Setting up the Geometry&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-the-time-equations&quot; id=&quot;markdown-toc-heading-the-time-equations&quot;&gt;The Time Equations&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-the-final-equation&quot; id=&quot;markdown-toc-heading-the-final-equation&quot;&gt;The Final Equation&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-why-the-angled-path-is-better-the-intuition&quot; id=&quot;markdown-toc-heading-why-the-angled-path-is-better-the-intuition&quot;&gt;Why the Angled Path is Better (The Intuition)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-learning-takeaways&quot; id=&quot;markdown-toc-heading-learning-takeaways&quot;&gt;Learning Takeaways&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-references&quot; id=&quot;markdown-toc-heading-references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/duck-and-fox.jpeg&quot; align=&quot;right&quot; style=&quot;max-width:500px; margin: 0 0 15px 15px;&quot; alt=&quot;Fox and Duck&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;heading-introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The &quot;Fox and Duck&quot; puzzle is a classic mathematical brain teaser that beautifully demonstrates how the most direct path is not always the best one.&lt;/p&gt;

&lt;h3 id=&quot;heading-problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;Imagine a clever duck in the center of a perfectly circular pond and a hungry fox on the shore. The fox can run along the shore, and the duck can swim. The question is: how much faster does the fox need to be to guarantee it can catch the duck when it reaches the shore?&lt;/p&gt;

&lt;p&gt;This problem isn&apos;t just a simple race; it&apos;s a game of wits, positioning, and optimal strategy. The solution requires a clever two-part plan and a bit of calculus to pin down the exact numbers. Let&apos;s dive in.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-the-setup&quot;&gt;The Setup&lt;/h2&gt;

&lt;p&gt;To solve this, we need to define our variables.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;R&lt;/strong&gt;: The radius of the circular pond.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;v&lt;/strong&gt;: The constant swimming speed of the duck.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;kv&lt;/strong&gt;: The constant running speed of the fox.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;k&lt;/strong&gt;: The speed ratio. This is the crucial number we want to find the limit for. If the fox&apos;s speed is 3 times the duck&apos;s, then \(k=3\).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The goal is to find the maximum value of \(k\) for which the duck can still devise a strategy to escape.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-the-simplest-strategy-a-simple-dash&quot;&gt;The Simplest Strategy: A Simple Dash&lt;/h2&gt;

&lt;p&gt;The most intuitive strategy is for the duck to pick a point on the shore and swim directly to it from the center. What&apos;s its best bet? To swim directly away from the fox.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The duck targets a point &lt;strong&gt;P&lt;/strong&gt; on the shore.&lt;/li&gt;
  &lt;li&gt;The fox, on the opposite side, must run half the circumference to intercept the duck at &lt;strong&gt;P&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Duck&apos;s distance&lt;/strong&gt; = \(R\). &lt;strong&gt;Duck&apos;s time&lt;/strong&gt; = \(R/v\).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fox&apos;s distance&lt;/strong&gt; = \(\pi R\) (half the circumference). &lt;strong&gt;Fox&apos;s time&lt;/strong&gt; = \(\pi R / (kv)\).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For the duck to escape, its time must be less than the fox&apos;s time:
\(\frac{R}{v} &amp;lt; \frac{\pi R}{kv}\)
\(1 &amp;lt; \frac{\pi}{k}\)
\(k &amp;lt; \pi \approx 3.14159\)
This strategy works, but it&apos;s not optimal. The duck can do better. It can beat a much faster fox.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-the-optimal-strategy-a-two-phase-escape&quot;&gt;The Optimal Strategy: A Two-Phase Escape&lt;/h2&gt;

&lt;p&gt;The winning strategy is a two-part plan that prioritizes getting an advantageous position &lt;em&gt;before&lt;/em&gt; making the final dash.&lt;/p&gt;

&lt;h3 id=&quot;heading-phase-1-gaining-an-advantage&quot;&gt;Phase 1: Gaining an Advantage&lt;/h3&gt;

&lt;p&gt;The duck&apos;s first goal is &lt;strong&gt;not&lt;/strong&gt; to get to the shore, but to get to a specific &quot;starting line&quot; within the pond. This is an inner circle with a radius of \(R/k\).&lt;/p&gt;

&lt;p&gt;Here&apos;s how it works:
The duck, starting at the center, swims in a spiral path outwards. It always keeps the center of the pond between itself and the fox. This forces the fox to run along the shore to keep up.&lt;/p&gt;

&lt;p&gt;The key is &lt;strong&gt;angular speed&lt;/strong&gt;. The fox has to cover a large circumference on the shore, while the duck covers a much smaller one. As long as the duck is within a distance \(r &amp;lt; R/k\) from the center, it can turn (change its angle) faster than the fox can. The duck uses this advantage to maneuver until it&apos;s at a distance of exactly \(R/k\) from the center, with the fox positioned &lt;strong&gt;diametrically opposite&lt;/strong&gt; on the shore. Now, Phase 2 begins.&lt;/p&gt;

&lt;h3 id=&quot;heading-phase-2-the-optimal-dash&quot;&gt;Phase 2: The Optimal Dash&lt;/h3&gt;

&lt;p&gt;Having forced the fox into the worst possible starting position, the duck now makes its break for the shore. But it does &lt;strong&gt;not&lt;/strong&gt; swim straight out. It swims at a carefully chosen angle. This is the part that often causes confusion.&lt;/p&gt;

&lt;p&gt;Why swim at an angle? It&apos;s a strategic trade-off. By swimming at an angle, the duck makes its own path slightly longer. However, it forces the fox to run along an arc that, while being the &quot;shorter&quot; of the fox&apos;s two options, is still exceptionally long. This trade-off is what allows the duck to beat a much faster fox.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-the-derivation&quot;&gt;The Derivation&lt;/h2&gt;

&lt;p&gt;For simplicity, let&apos;s assume the pond&apos;s radius \(R=1\) and the duck&apos;s speed \(v=1\).&lt;/p&gt;

&lt;h3 id=&quot;heading-setting-up-the-geometry&quot;&gt;Setting up the Geometry&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;At the start of Phase 2, the duck is at point &lt;strong&gt;D&lt;/strong&gt; = \((1/k, 0)\).&lt;/li&gt;
  &lt;li&gt;The fox is diametrically opposite at point &lt;strong&gt;F&lt;/strong&gt; = \((-1, 0)\).&lt;/li&gt;
  &lt;li&gt;The duck swims to a point &lt;strong&gt;P&lt;/strong&gt; on the shore, defined by the angle \(\theta\). &lt;strong&gt;P&lt;/strong&gt; = \((\cos\theta, \sin\theta)\).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;heading-the-time-equations&quot;&gt;The Time Equations&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Duck&apos;s Time (\(T_{duck}\))&lt;/strong&gt;: The straight-line distance from D to P.
  \(T_{duck} = \sqrt{(\cos\theta - 1/k)^2 + (\sin\theta)^2} = \sqrt{1 + \frac{1}{k^2} - \frac{2\cos\theta}{k}}\)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fox&apos;s Time (\(T_{fox}\))&lt;/strong&gt;: The arc length from F to P.
  \(T_{fox} = \frac{\text{Arc Length}}{k} = \frac{\pi - \theta}{k}\)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;heading-the-final-equation&quot;&gt;The Final Equation&lt;/h3&gt;

&lt;p&gt;The duck can escape if there is any angle \(\theta\) where \(T_{duck} \le T_{fox}\). The critical case is finding the speed \(k\) where the best possible outcome for the duck is a tie. Using calculus to find the optimal angle \(\theta\) that maximizes the duck&apos;s chances leads to a complex transcendental equation.&lt;/p&gt;

&lt;p&gt;Let &lt;strong&gt;\(\alpha = \arccos(1/k)\)&lt;/strong&gt;. The final relationship is:
\(\tan(\alpha) = \pi + \alpha\)
This equation cannot be solved algebraically. Using numerical methods, we find the solution for \(\alpha\) is approximately &lt;strong&gt;1.3518 radians&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Since \(k = 1/\cos(\alpha)\), we can find our answer:
\(k = \frac{1}{\cos(1.3518)} \approx \bf{4.6033}\)
If the fox is more than ~4.6 times faster than the duck, escape is impossible. If it&apos;s less, the duck has a winning strategy.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-why-the-angled-path-is-better-the-intuition&quot;&gt;Why the Angled Path is Better (The Intuition)&lt;/h2&gt;

&lt;p&gt;The most confusing part is why the angled path is superior to the simple straight dash. Let&apos;s compare them as two separate races.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Race 1 The Simple Dash.&lt;/strong&gt; The duck swims its shortest possible path. In response, the fox must run its longest possible path (exactly half the circle). This is a good strategy.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Race 2 The Optimal Dash.&lt;/strong&gt; The duck swims a &lt;strong&gt;slightly longer&lt;/strong&gt; angled path. In response, the fox gets to run a &lt;strong&gt;slightly shorter&lt;/strong&gt; arc. This seems worse for the duck, but it&apos;s not.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key is that the tiny amount of extra time the duck adds to its swim is &lt;strong&gt;less than&lt;/strong&gt; the time benefit the fox gets. The duck is making a calculated sacrifice, accepting a slightly longer swim for itself to create a race that is overall much more favorable. This better time-to-distance trade-off is what pushes the escape threshold from \(k \approx 4.14\) to \(k \approx 4.60\).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading-learning-takeaways&quot;&gt;Learning Takeaways&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Optimal strategy is often counter-intuitive&lt;/strong&gt;: The most direct path isn&apos;t always the best. Winning can require indirect setup moves.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Positioning is paramount&lt;/strong&gt;: Phase 1 is entirely about achieving an advantageous position before the final &quot;attack.&quot;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Understand trade-offs&lt;/strong&gt;: The duck accepts a small disadvantage (a longer path) to create a much larger strategic advantage (a more favorable race).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Math defines the boundaries&lt;/strong&gt;: Intuition can get you started, but only rigorous mathematics can find the precise tipping point of a complex system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;heading-references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://math.stackexchange.com/questions/659448/the-fox-and-the-duck-puzzle&quot;&gt;Stack Exchange - The Fox and the Duck Puzzle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Lady_and_the_monster_puzzle&quot;&gt;Wikipedia - Lady and the Monster Puzzle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Radhikesh Agrawal</name><email>rhagrawal1.0.7@gmail.com</email></author><category term="Puzzles" /><category term="Mathematics" /><category term="Game-Theory" /><category term="Quant" /><category term="Brain-Teaser" /><category term="Optimization" /><category term="Calculus" /><category term="Strategy" /><summary type="html">Originally written on 6 September 2025, 15:02</summary></entry><entry><title type="html">Retrograde Amnesia</title><link href="http://localhost:4000/2025/06/05/retrograde-amnesia/" rel="alternate" type="text/html" title="Retrograde Amnesia" /><published>2025-06-05T00:00:00+05:30</published><updated>2025-06-05T00:00:00+05:30</updated><id>http://localhost:4000/2025/06/05/retrograde-amnesia</id><content type="html" xml:base="http://localhost:4000/2025/06/05/retrograde-amnesia/"></content><author><name>Radhikesh Agrawal</name><email>rhagrawal1.0.7@gmail.com</email></author><category term="Psychology" /><category term="Neuroscience" /><category term="Memory" /><category term="Brain" /><category term="Amnesia" /></entry><entry><title type="html">CI/CD: What the Heck is it?</title><link href="http://localhost:4000/2025/06/04/ci-cd/" rel="alternate" type="text/html" title="CI/CD: What the Heck is it?" /><published>2025-06-04T00:00:00+05:30</published><updated>2025-06-04T00:00:00+05:30</updated><id>http://localhost:4000/2025/06/04/ci-cd</id><content type="html" xml:base="http://localhost:4000/2025/06/04/ci-cd/">&lt;ul class=&quot;toc&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-cicd-what-the-heck-is-it&quot; id=&quot;markdown-toc-heading-cicd-what-the-heck-is-it&quot;&gt;CI/CD: What the Heck is it?&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-ci---continuous-integration&quot; id=&quot;markdown-toc-heading-ci---continuous-integration&quot;&gt;CI - Continuous Integration&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-cd---continuous-deliverydeployment&quot; id=&quot;markdown-toc-heading-cd---continuous-deliverydeployment&quot;&gt;CD - Continuous Delivery/Deployment&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-references&quot; id=&quot;markdown-toc-heading-references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;heading-cicd-what-the-heck-is-it&quot;&gt;CI/CD: What the Heck is it?&lt;/h1&gt;

&lt;p&gt;There are two foundational principals in software development. Software development is primarily and fundamentally always an exercise in &lt;strong&gt;learning&lt;/strong&gt; and &lt;strong&gt;discovery&lt;/strong&gt;. To achieve that and to allows us to scale that product process up, we need to focus on managing complexity of the things we build. We don&apos;t get great at learning and discovery by doing the same thing over and over again. We get great at it by learning from our mistakes, iterating on our ideas, and improving our processes. And that&apos;s where CI/CD comes in. You can call it a good practice, a methodology, a philosophy or even a trick. But at its core, CI/CD is about making software development more efficient and effective.&lt;/p&gt;

&lt;h2 id=&quot;heading-ci---continuous-integration&quot;&gt;CI - Continuous Integration&lt;/h2&gt;

&lt;p&gt;Continuous Integration (CI) is the practice of frequently integrating code changes into a shared repository. The goal is to detect errors quickly and improve software quality. This may sound something which you already do but some time back, it was common for individuals or teams to keep their code changes in isolation for long periods, leading to integration challenges and bugs. CI addresses this by encouraging developers to commit code changes regularly, ideally multiple times a day. Each commit triggers an automated build and test process, ensuring that new code integrates smoothly with the existing codebase.&lt;/p&gt;

&lt;p&gt;Every time a developer pushes code to the repository, an automated system runs tests to verify that the new code doesn&apos;t break existing functionality. This helps catch bugs early, making it easier to fix them before they become larger issues. There are primarily three kinds of tests that are run in CI:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Unit Tests&lt;/strong&gt;: These tests check individual components or functions of the code to ensure they work as expected.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Integration Tests&lt;/strong&gt;: These tests verify that different components of the application work together correctly.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;End-to-End Tests&lt;/strong&gt;: These tests simulate real user scenarios to ensure the entire application functions as intended.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;heading-cd---continuous-deliverydeployment&quot;&gt;CD - Continuous Delivery/Deployment&lt;/h2&gt;

&lt;p&gt;Continuous Delivery is the practice of ensuring that code changes are automatically prepared for a release to production. It builds on CI by automating the deployment process, allowing teams to release software more frequently and reliably.&lt;/p&gt;

&lt;p&gt;CI/CD together is the practice of merging changes frequently as developers work on a project, and having those changes automatically pass through a series of automated tests. Upon completion, these changes are bundled into a release that can be deployed to production at any time. Teams practicing &lt;em&gt;CI/CD&lt;/em&gt; will typically produce multiple releases per day, allowing them to respond quickly to user feedback and market changes. To put it simply, without CI/CD, our code would have names ending with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_final_finalfinal_no_really_final_v3&lt;/code&gt; or something like that.&lt;/p&gt;

&lt;h2 id=&quot;heading-references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=qiDIif7JVMo&amp;amp;ab_channel=ModernSoftwareEngineering&quot;&gt;Continous Delvery Simply Explained&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.atlassian.com/continuous-delivery/principles/continuous-integration-vs-delivery-vs-deployment&quot;&gt;Continuous integration vs. delivery vs. deployment&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=42UP1fxi2SY&amp;amp;ab_channel=ByteByteGo&quot;&gt;CI/CD in 5 minutes&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://continuousdelivery.com/foundations/continuous-integration/&quot;&gt;CI/CD Explained&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Radhikesh Agrawal</name><email>rhagrawal1.0.7@gmail.com</email></author><category term="DevOps" /><category term="Software-Engineering" /><category term="Best-Practices" /><category term="Software-Development" /><summary type="html"></summary></entry><entry><title type="html">Graph Traversal - BFS and DFS</title><link href="http://localhost:4000/2025/05/30/graph-traversal-bfs-dfs/" rel="alternate" type="text/html" title="Graph Traversal - BFS and DFS" /><published>2025-05-30T00:00:00+05:30</published><updated>2025-05-30T00:00:00+05:30</updated><id>http://localhost:4000/2025/05/30/graph-traversal-bfs-dfs</id><content type="html" xml:base="http://localhost:4000/2025/05/30/graph-traversal-bfs-dfs/">&lt;blockquote&gt;
  &lt;p&gt;Originally written on &lt;strong&gt;01 August 2024, 21:00&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul class=&quot;toc&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-why-is-time-complexity-of-bfs--dfs-mathcalov--e&quot; id=&quot;markdown-toc-heading-why-is-time-complexity-of-bfs--dfs-mathcalov--e&quot;&gt;Why is time complexity of BFS &amp;amp; DFS \(\mathcal{O}(|V| + |E|)\)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-references&quot; id=&quot;markdown-toc-heading-references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;heading-why-is-time-complexity-of-bfs--dfs-mathcalov--e&quot;&gt;Why is time complexity of BFS &amp;amp; DFS \(\mathcal{O}(|V| + |E|)\)&lt;/h1&gt;

&lt;p&gt;It seems that since we are only visiting all the edges, the time complexity should be $\mathcal{O}(\lvert E \rvert)$. But the thing is, we are ignoring the constant operations that are being performed $\lvert V \rvert$ number of times.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;# This while loop will run V times, where V is total number of vertices in graph.
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graphTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;currentVertex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graphTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getVertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# This while loop will run E_adj times, where E_adj is number of adjacent edges to current vertex.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentVertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasAdjacentVertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;graphTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adjacentVertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;graphTraversal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentVertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;\(\therefore\) the time complexity will be:&lt;/p&gt;

\[\begin{align*}
\mathcal{O}(V * (\mathcal{O}(1) + O(E_{adj}) + \mathcal{O}(1))) &amp;amp;= \mathcal{O}(V + V * E_{adj} + V)\\
&amp;amp;= \mathcal{O}(2V + E(\textit{total number of edges in graph})) \\
&amp;amp;= \mathcal{O}(V + E) \\
\end{align*}\]

&lt;h1 id=&quot;heading-references&quot;&gt;References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/26549140/breadth-first-search-time-complexity-analysis&quot;&gt;Stack Overflow - BFS Time Complexity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Radhikesh Agrawal</name><email>rhagrawal1.0.7@gmail.com</email></author><category term="Data-Structure-and-Algorithms" /><category term="CPP" /><category term="DSA" /><category term="Graphs" /><summary type="html">Originally written on 01 August 2024, 21:00</summary></entry><entry><title type="html">920. Number of Music Playlists</title><link href="http://localhost:4000/2025/05/30/number-of-music-playlists/" rel="alternate" type="text/html" title="920. Number of Music Playlists" /><published>2025-05-30T00:00:00+05:30</published><updated>2025-05-30T00:00:00+05:30</updated><id>http://localhost:4000/2025/05/30/number-of-music-playlists</id><content type="html" xml:base="http://localhost:4000/2025/05/30/number-of-music-playlists/">&lt;blockquote&gt;
  &lt;p&gt;Originally written on &lt;strong&gt;03 August 2024, 13:36&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul class=&quot;toc&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-intuition&quot; id=&quot;markdown-toc-heading-intuition&quot;&gt;Intuition&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-base-case&quot; id=&quot;markdown-toc-heading-base-case&quot;&gt;Base Case&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-code&quot; id=&quot;markdown-toc-heading-code&quot;&gt;Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;heading-intuition&quot;&gt;Intuition&lt;/h1&gt;

&lt;p&gt;The subproblem is the following: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dp[i][j]&lt;/code&gt; denotes the number of playlists we can make using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; out of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unique_songs&lt;/code&gt; and a playlist length of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;j&lt;/code&gt; out of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;total_songs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can have the following two cases:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;We add another song using an already existing song:&lt;/strong&gt;&lt;/p&gt;

\[dp[i][j] = dp[i][j-1] \cdot \text{(number of ways to choose a song out of those i songs)}\]

    &lt;p&gt;Note that we cannot choose any of the last &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt; songs since we need at least that many songs between repetitions. So, out of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; songs, we cannot choose the last &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt; songs.&lt;/p&gt;

    &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/posts/number-of-music-playlists/img-1.png&quot; style=&quot;max-width: 50%; height: auto;&quot; alt=&quot;Description&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Hence we&apos;ll have:&lt;/p&gt;

\[dp[i][j] = dp[i][j-1] \cdot \max(0, i - k)\]

    &lt;p&gt;All these &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt; songs will be different, as in a valid playlist, if a song repeats, it must have at least &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt; songs between repeats. If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i-k&lt;/code&gt; becomes negative, we take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; instead.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;We add another song using a new song:&lt;/strong&gt;&lt;/p&gt;

\[dp[i][j] += dp[i-1][j-1] \cdot (\text{n_unique_songs} - (i-1))\]

    &lt;p&gt;We have remaining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n_unique_songs - (i - 1)&lt;/code&gt; choices.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thus, the complete recurrence relation becomes:&lt;/p&gt;

\[dp[i][j] = dp[i][j-1] \cdot \max(0, i - k) + dp[i-1][j-1] \cdot (\text{n_unique_songs} - (i - 1))\]

&lt;h1 id=&quot;heading-base-case&quot;&gt;Base Case&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Why &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dp[0][0] = 1&lt;/code&gt;?&lt;/strong&gt;&lt;br /&gt;
It&apos;s possible to fill an empty list with 0 songs.&lt;br /&gt;
All &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;j &amp;gt; i&lt;/code&gt; are invalid cases (you can&apos;t put more songs into an empty list), so for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;j &amp;gt; 0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dp[0][j] = 0&lt;/code&gt;.&lt;br /&gt;
Similarly, for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i &amp;gt; 0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dp[i][0] = 0&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br /&gt;
Take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dp[1][1]&lt;/code&gt;. To fit a size-1 list with 1 new song, we have:&lt;/p&gt;

\[dp[0][1 - 1] \cdot (N - (1 - 1)) = 1 \cdot N\]
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;heading-code&quot;&gt;Code&lt;/h1&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modulo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1e9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numMusicPlaylists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unique_songs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_songs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique_songs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_songs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unique_songs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_songs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modulo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique_songs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modulo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique_songs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_songs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Radhikesh Agrawal</name><email>rhagrawal1.0.7@gmail.com</email></author><category term="DSA" /><category term="CPP" /><category term="CPP" /><category term="DSA" /><category term="LeetCode" /><category term="Dynamic-Programming" /><summary type="html">Originally written on 03 August 2024, 13:36</summary></entry><entry><title type="html">HEP-JEPA: Building Foundation Models for Collider Physics</title><link href="http://localhost:4000/2025/05/29/hepjepa/" rel="alternate" type="text/html" title="HEP-JEPA: Building Foundation Models for Collider Physics" /><published>2025-05-29T00:00:00+05:30</published><updated>2025-05-29T00:00:00+05:30</updated><id>http://localhost:4000/2025/05/29/hepjepa</id><content type="html" xml:base="http://localhost:4000/2025/05/29/hepjepa/">&lt;blockquote&gt;
  &lt;p&gt;Recently Presented - ICLR 2025 Workshop on HEP-JEPA&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul class=&quot;toc&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-what-is-hep-jepa&quot; id=&quot;markdown-toc-heading-what-is-hep-jepa&quot;&gt;What is HEP-JEPA?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-why-foundation-models-in-hep&quot; id=&quot;markdown-toc-heading-why-foundation-models-in-hep&quot;&gt;Why Foundation Models in HEP!?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-what-makes-hep-jepa-different&quot; id=&quot;markdown-toc-heading-what-makes-hep-jepa-different&quot;&gt;What Makes HEP-JEPA Different?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-architecture-overview&quot; id=&quot;markdown-toc-heading-architecture-overview&quot;&gt;Architecture Overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-how-well-does-it-work&quot; id=&quot;markdown-toc-heading-how-well-does-it-work&quot;&gt;How Well Does It Work?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-whats-next&quot; id=&quot;markdown-toc-heading-whats-next&quot;&gt;What’s Next?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;heading-what-is-hep-jepa&quot;&gt;What is HEP-JEPA?&lt;/h1&gt;

&lt;p&gt;HEP-JEPA is a self-supervised foundation model designed to work with data from high-energy particle collisions — like those at the Large Hadron Collider (LHC). Built using the Joint Embedding Predictive Architecture (JEPA), it learns general-purpose representations of particle jets from raw, unlabeled data.&lt;/p&gt;

&lt;p&gt;The idea is similar to how large language models learn &quot;semantics&quot; of text — except here, we’re learning the &quot;semantics&quot; of particle physics.&lt;/p&gt;

&lt;h1 id=&quot;heading-why-foundation-models-in-hep&quot;&gt;Why Foundation Models in HEP!?&lt;/h1&gt;

&lt;p&gt;Traditional models in high-energy physics are trained task-by-task, often relying on hand-labeled simulation data. This isn&apos;t scalable, especially as LHC data grows into the hundreds of petabytes. HEP-JEPA aims to change that by:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pretraining once on large jet datasets (we use JetClass with 100M samples)&lt;/li&gt;
  &lt;li&gt;Fine-tuning quickly for specific tasks&lt;/li&gt;
  &lt;li&gt;Reducing compute costs and increasing reusability&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;heading-what-makes-hep-jepa-different&quot;&gt;What Makes HEP-JEPA Different?&lt;/h1&gt;

&lt;p&gt;Most existing self-supervised methods in HEP follow either contrastive learning or generative (masked) approaches. But both have limitations:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Contrastive learning depends heavily on the quality of negative samples&lt;br /&gt;
Masked modeling often focuses too much on local reconstruction&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;HEP-JEPA avoids both by predicting embeddings directly in latent space — no decoder needed. This makes training efficient and the representations more abstract and transferable.&lt;/p&gt;

&lt;h1 id=&quot;heading-architecture-overview&quot;&gt;Architecture Overview&lt;/h1&gt;

&lt;p&gt;The model consists of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;strong&gt;context encoder&lt;/strong&gt; that processes masked &quot;visible&quot; tokens (particles in a jet)&lt;/li&gt;
  &lt;li&gt;A &lt;strong&gt;target encoder&lt;/strong&gt; (an EMA version of the context encoder)&lt;/li&gt;
  &lt;li&gt;A &lt;strong&gt;predictor&lt;/strong&gt; that learns to predict target embeddings from the context&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We tokenize particle jets using both kinematic and geometric features, apply spatial sampling strategies, and construct context/target blocks using custom sequencers.&lt;/p&gt;

&lt;h1 id=&quot;heading-how-well-does-it-work&quot;&gt;How Well Does It Work?&lt;/h1&gt;

&lt;p&gt;We benchmarked HEP-JEPA on:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Jet classification&lt;/strong&gt; using JetClass&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Top quark tagging&lt;/strong&gt; using the TQTR dataset&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Regression tasks&lt;/strong&gt; for predicting jet observables like EFPs and jet shapes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The results? HEP-JEPA performs on par or better than state-of-the-art models like OmniJet-α and MPM — especially in few-shot learning settings.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;On top tagging with 10% labels:&lt;br /&gt;
&lt;strong&gt;HEP-JEPA&lt;/strong&gt; achieves 86.9% accuracy and 0.94 AUROC — outperforming baselines with fewer parameters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;heading-whats-next&quot;&gt;What’s Next?&lt;/h1&gt;

&lt;p&gt;This is just the beginning. We&apos;re looking at:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Adapting HEP-JEPA to anomaly detection and detector unfolding&lt;/li&gt;
  &lt;li&gt;Scaling to generative tasks&lt;/li&gt;
  &lt;li&gt;Improving physics-based priors in architecture&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can learn more at the &lt;a href=&quot;https://hep-jepa.github.io/&quot;&gt;ICLR 2025 HEP-JEPA Workshop&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thanks for reading! Questions or ideas? Feel free to &lt;a href=&quot;mailto:rhagrawal1.0.7@gmail.com&quot;&gt;reach out&lt;/a&gt; or check out the &lt;a href=&quot;https://arxiv.org/abs/2502.03933&quot;&gt;paper on arXiv&lt;/a&gt;.&lt;/p&gt;</content><author><name>Radhikesh Agrawal</name><email>rhagrawal1.0.7@gmail.com</email></author><category term="Machine-Learning" /><category term="High-Energy-Physics" /><category term="HEP" /><category term="Foundation-Models" /><category term="JEPA" /><category term="Self-Supervised-Learning" /><summary type="html">Recently Presented - ICLR 2025 Workshop on HEP-JEPA</summary></entry><entry><title type="html">Tower of Hanoi: A Recursion Classic</title><link href="http://localhost:4000/2025/05/29/tower-of-hanoi/" rel="alternate" type="text/html" title="Tower of Hanoi: A Recursion Classic" /><published>2025-05-29T00:00:00+05:30</published><updated>2025-05-29T00:00:00+05:30</updated><id>http://localhost:4000/2025/05/29/tower-of-hanoi</id><content type="html" xml:base="http://localhost:4000/2025/05/29/tower-of-hanoi/">&lt;blockquote&gt;
  &lt;p&gt;Originally written on &lt;strong&gt;30 July 2024, 16:53&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul class=&quot;toc&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-introduction&quot; id=&quot;markdown-toc-heading-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-step-by-step-logic&quot; id=&quot;markdown-toc-heading-step-by-step-logic&quot;&gt;Step-by-step logic&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-some-sample-cases&quot; id=&quot;markdown-toc-heading-some-sample-cases&quot;&gt;Some Sample Cases&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-general-case&quot; id=&quot;markdown-toc-heading-general-case&quot;&gt;General Case&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-time-complexity&quot; id=&quot;markdown-toc-heading-time-complexity&quot;&gt;Time Complexity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-references&quot; id=&quot;markdown-toc-heading-references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;heading-introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;The Tower of Hanoi is a classic recursive puzzle where the goal is to move \(n\) discs from a source tower to a target tower, using a spare tower — all while never placing a larger disc on a smaller one.&lt;/p&gt;

&lt;p&gt;The problem is a great illustration of how recursion breaks a large problem into smaller sub-problems.&lt;/p&gt;

&lt;h1 id=&quot;heading-step-by-step-logic&quot;&gt;Step-by-step logic&lt;/h1&gt;

&lt;p&gt;Let’s consider the following Python code to solve the problem:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# source
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# spare
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# target
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Move disc &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; from &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;C&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;B&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;heading-some-sample-cases&quot;&gt;Some Sample Cases&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; is 0, we do nothing (base case).&lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; is 1, we can directly move the disc from the source to the target.&lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; is 2, we can move the first disc to the spare tower, then the second disc to the target tower, and finally the first disc from the spare tower to the target tower.&lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; is 3, imagine that there are only two discs on the source tower and our spare tower is actually the target tower. We can follow the procedure for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n = 2&lt;/code&gt; to move the first two discs to the spare tower (imagining it as the target tower), then move the third disc directly to the target tower. Now the source tower is the spare tower and we just need to move the two discs from the spare tower to the target tower, which is again a case of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n = 2&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; is 4, we can follow the same logic as above, treating the first three discs as a subproblem and moving them to the spare tower, then moving the fourth disc to the target tower, and finally moving the three discs from the spare tower to the target tower.&lt;/li&gt;
  &lt;li&gt;This pattern continues for any number of discs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;heading-general-case&quot;&gt;General Case&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;At line 12, we make the initial call to move all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; discs from tower &lt;strong&gt;A&lt;/strong&gt; to tower &lt;strong&gt;C&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;First, we move the top &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n-1&lt;/code&gt; discs to the &lt;strong&gt;spare&lt;/strong&gt; tower (line 8).&lt;/li&gt;
  &lt;li&gt;Then, we move the largest disc to the &lt;strong&gt;target&lt;/strong&gt; tower (line 9).&lt;/li&gt;
  &lt;li&gt;Finally, we move the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n-1&lt;/code&gt; discs from the &lt;strong&gt;spare&lt;/strong&gt; tower to the &lt;strong&gt;target&lt;/strong&gt; tower (line 10).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This recursive approach continues until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n = 0&lt;/code&gt;, which becomes our base case.&lt;/p&gt;

&lt;h1 id=&quot;heading-time-complexity&quot;&gt;Time Complexity&lt;/h1&gt;

&lt;p&gt;The number of moves required to solve the Tower of Hanoi puzzle for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; discs follows the recurrence:&lt;/p&gt;

\[T(n) = 2 \cdot T(n-1) + 1\]

&lt;p&gt;This simplifies to:&lt;/p&gt;

\[T(n) = 2^n - 1\]

&lt;p&gt;So for 10 discs, it takes \(2^{10} - 1 = 1023\) moves!&lt;/p&gt;

&lt;h1 id=&quot;heading-references&quot;&gt;References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/2SUvWfNJSsM?si=DPtOK-lMpcQjF45w&quot;&gt;3Blue1Brown - Tower of Hanoi and the Sierpinski Triangle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Radhikesh Agrawal</name><email>rhagrawal1.0.7@gmail.com</email></author><category term="Data-Structure-and-Algorithms" /><category term="Puzzles" /><category term="Recursion" /><category term="DSA" /><summary type="html">Originally written on 30 July 2024, 16:53</summary></entry></feed>